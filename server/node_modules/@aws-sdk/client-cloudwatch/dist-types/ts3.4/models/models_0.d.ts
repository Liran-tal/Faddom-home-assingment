import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { CloudWatchServiceException as __BaseException } from "./CloudWatchServiceException";
export declare type AlarmType = "CompositeAlarm" | "MetricAlarm";
export declare type HistoryItemType = "Action" | "ConfigurationUpdate" | "StateUpdate";

export interface AlarmHistoryItem {
    
    AlarmName?: string;
    
    AlarmType?: AlarmType | string;
    
    Timestamp?: Date;
    
    HistoryItemType?: HistoryItemType | string;
    
    HistorySummary?: string;
    
    HistoryData?: string;
}
export declare namespace AlarmHistoryItem {
    
    const filterSensitiveLog: (obj: AlarmHistoryItem) => any;
}

export interface Range {
    
    StartTime: Date | undefined;
    
    EndTime: Date | undefined;
}
export declare namespace Range {
    
    const filterSensitiveLog: (obj: Range) => any;
}

export interface AnomalyDetectorConfiguration {
    
    ExcludedTimeRanges?: Range[];
    
    MetricTimezone?: string;
}
export declare namespace AnomalyDetectorConfiguration {
    
    const filterSensitiveLog: (obj: AnomalyDetectorConfiguration) => any;
}

export interface Dimension {
    
    Name: string | undefined;
    
    Value: string | undefined;
}
export declare namespace Dimension {
    
    const filterSensitiveLog: (obj: Dimension) => any;
}

export interface Metric {
    
    Namespace?: string;
    
    MetricName?: string;
    
    Dimensions?: Dimension[];
}
export declare namespace Metric {
    
    const filterSensitiveLog: (obj: Metric) => any;
}
export declare type StandardUnit = "Bits" | "Bits/Second" | "Bytes" | "Bytes/Second" | "Count" | "Count/Second" | "Gigabits" | "Gigabits/Second" | "Gigabytes" | "Gigabytes/Second" | "Kilobits" | "Kilobits/Second" | "Kilobytes" | "Kilobytes/Second" | "Megabits" | "Megabits/Second" | "Megabytes" | "Megabytes/Second" | "Microseconds" | "Milliseconds" | "None" | "Percent" | "Seconds" | "Terabits" | "Terabits/Second" | "Terabytes" | "Terabytes/Second";

export interface MetricStat {
    
    Metric: Metric | undefined;
    
    Period: number | undefined;
    
    Stat: string | undefined;
    
    Unit?: StandardUnit | string;
}
export declare namespace MetricStat {
    
    const filterSensitiveLog: (obj: MetricStat) => any;
}

export interface MetricDataQuery {
    
    Id: string | undefined;
    
    MetricStat?: MetricStat;
    
    Expression?: string;
    
    Label?: string;
    
    ReturnData?: boolean;
    
    Period?: number;
    
    AccountId?: string;
}
export declare namespace MetricDataQuery {
    
    const filterSensitiveLog: (obj: MetricDataQuery) => any;
}

export interface MetricMathAnomalyDetector {
    
    MetricDataQueries?: MetricDataQuery[];
}
export declare namespace MetricMathAnomalyDetector {
    
    const filterSensitiveLog: (obj: MetricMathAnomalyDetector) => any;
}

export interface SingleMetricAnomalyDetector {
    
    Namespace?: string;
    
    MetricName?: string;
    
    Dimensions?: Dimension[];
    
    Stat?: string;
}
export declare namespace SingleMetricAnomalyDetector {
    
    const filterSensitiveLog: (obj: SingleMetricAnomalyDetector) => any;
}
export declare type AnomalyDetectorStateValue = "PENDING_TRAINING" | "TRAINED" | "TRAINED_INSUFFICIENT_DATA";

export interface AnomalyDetector {
    
    Namespace?: string;
    
    MetricName?: string;
    
    Dimensions?: Dimension[];
    
    Stat?: string;
    
    Configuration?: AnomalyDetectorConfiguration;
    
    StateValue?: AnomalyDetectorStateValue | string;
    
    SingleMetricAnomalyDetector?: SingleMetricAnomalyDetector;
    
    MetricMathAnomalyDetector?: MetricMathAnomalyDetector;
}
export declare namespace AnomalyDetector {
    
    const filterSensitiveLog: (obj: AnomalyDetector) => any;
}
export declare enum AnomalyDetectorType {
    METRIC_MATH = "METRIC_MATH",
    SINGLE_METRIC = "SINGLE_METRIC"
}

export interface PartialFailure {
    
    FailureResource?: string;
    
    ExceptionType?: string;
    
    FailureCode?: string;
    
    FailureDescription?: string;
}
export declare namespace PartialFailure {
    
    const filterSensitiveLog: (obj: PartialFailure) => any;
}
export declare type ComparisonOperator = "GreaterThanOrEqualToThreshold" | "GreaterThanThreshold" | "GreaterThanUpperThreshold" | "LessThanLowerOrGreaterThanUpperThreshold" | "LessThanLowerThreshold" | "LessThanOrEqualToThreshold" | "LessThanThreshold";
export declare type StateValue = "ALARM" | "INSUFFICIENT_DATA" | "OK";

export interface CompositeAlarm {
    
    ActionsEnabled?: boolean;
    
    AlarmActions?: string[];
    
    AlarmArn?: string;
    
    AlarmConfigurationUpdatedTimestamp?: Date;
    
    AlarmDescription?: string;
    
    AlarmName?: string;
    
    AlarmRule?: string;
    
    InsufficientDataActions?: string[];
    
    OKActions?: string[];
    
    StateReason?: string;
    
    StateReasonData?: string;
    
    StateUpdatedTimestamp?: Date;
    
    StateValue?: StateValue | string;
}
export declare namespace CompositeAlarm {
    
    const filterSensitiveLog: (obj: CompositeAlarm) => any;
}

export declare class ConcurrentModificationException extends __BaseException {
    readonly name: "ConcurrentModificationException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
}

export interface DashboardEntry {
    
    DashboardName?: string;
    
    DashboardArn?: string;
    
    LastModified?: Date;
    
    Size?: number;
}
export declare namespace DashboardEntry {
    
    const filterSensitiveLog: (obj: DashboardEntry) => any;
}

export interface DashboardValidationMessage {
    
    DataPath?: string;
    
    Message?: string;
}
export declare namespace DashboardValidationMessage {
    
    const filterSensitiveLog: (obj: DashboardValidationMessage) => any;
}

export declare class DashboardInvalidInputError extends __BaseException {
    readonly name: "DashboardInvalidInputError";
    readonly $fault: "client";
    dashboardValidationMessages?: DashboardValidationMessage[];
    
    constructor(opts: __ExceptionOptionType<DashboardInvalidInputError, __BaseException>);
}

export declare class DashboardNotFoundError extends __BaseException {
    readonly name: "DashboardNotFoundError";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DashboardNotFoundError, __BaseException>);
}

export interface Datapoint {
    
    Timestamp?: Date;
    
    SampleCount?: number;
    
    Average?: number;
    
    Sum?: number;
    
    Minimum?: number;
    
    Maximum?: number;
    
    Unit?: StandardUnit | string;
    
    ExtendedStatistics?: {
        [key: string]: number;
    };
}
export declare namespace Datapoint {
    
    const filterSensitiveLog: (obj: Datapoint) => any;
}
export interface DeleteAlarmsInput {
    
    AlarmNames: string[] | undefined;
}
export declare namespace DeleteAlarmsInput {
    
    const filterSensitiveLog: (obj: DeleteAlarmsInput) => any;
}

export declare class ResourceNotFound extends __BaseException {
    readonly name: "ResourceNotFound";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ResourceNotFound, __BaseException>);
}
export interface DeleteAnomalyDetectorInput {
    
    Namespace?: string;
    
    MetricName?: string;
    
    Dimensions?: Dimension[];
    
    Stat?: string;
    
    SingleMetricAnomalyDetector?: SingleMetricAnomalyDetector;
    
    MetricMathAnomalyDetector?: MetricMathAnomalyDetector;
}
export declare namespace DeleteAnomalyDetectorInput {
    
    const filterSensitiveLog: (obj: DeleteAnomalyDetectorInput) => any;
}
export interface DeleteAnomalyDetectorOutput {
}
export declare namespace DeleteAnomalyDetectorOutput {
    
    const filterSensitiveLog: (obj: DeleteAnomalyDetectorOutput) => any;
}

export declare class InternalServiceFault extends __BaseException {
    readonly name: "InternalServiceFault";
    readonly $fault: "server";
    
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<InternalServiceFault, __BaseException>);
}

export declare class InvalidParameterCombinationException extends __BaseException {
    readonly name: "InvalidParameterCombinationException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidParameterCombinationException, __BaseException>);
}

export declare class InvalidParameterValueException extends __BaseException {
    readonly name: "InvalidParameterValueException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidParameterValueException, __BaseException>);
}

export declare class MissingRequiredParameterException extends __BaseException {
    readonly name: "MissingRequiredParameterException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<MissingRequiredParameterException, __BaseException>);
}

export declare class ResourceNotFoundException extends __BaseException {
    readonly name: "ResourceNotFoundException";
    readonly $fault: "client";
    ResourceType?: string;
    ResourceId?: string;
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
}
export interface DeleteDashboardsInput {
    
    DashboardNames: string[] | undefined;
}
export declare namespace DeleteDashboardsInput {
    
    const filterSensitiveLog: (obj: DeleteDashboardsInput) => any;
}
export interface DeleteDashboardsOutput {
}
export declare namespace DeleteDashboardsOutput {
    
    const filterSensitiveLog: (obj: DeleteDashboardsOutput) => any;
}
export interface DeleteInsightRulesInput {
    
    RuleNames: string[] | undefined;
}
export declare namespace DeleteInsightRulesInput {
    
    const filterSensitiveLog: (obj: DeleteInsightRulesInput) => any;
}
export interface DeleteInsightRulesOutput {
    
    Failures?: PartialFailure[];
}
export declare namespace DeleteInsightRulesOutput {
    
    const filterSensitiveLog: (obj: DeleteInsightRulesOutput) => any;
}
export interface DeleteMetricStreamInput {
    
    Name: string | undefined;
}
export declare namespace DeleteMetricStreamInput {
    
    const filterSensitiveLog: (obj: DeleteMetricStreamInput) => any;
}
export interface DeleteMetricStreamOutput {
}
export declare namespace DeleteMetricStreamOutput {
    
    const filterSensitiveLog: (obj: DeleteMetricStreamOutput) => any;
}
export declare enum ScanBy {
    TIMESTAMP_ASCENDING = "TimestampAscending",
    TIMESTAMP_DESCENDING = "TimestampDescending"
}
export interface DescribeAlarmHistoryInput {
    
    AlarmName?: string;
    
    AlarmTypes?: (AlarmType | string)[];
    
    HistoryItemType?: HistoryItemType | string;
    
    StartDate?: Date;
    
    EndDate?: Date;
    
    MaxRecords?: number;
    
    NextToken?: string;
    
    ScanBy?: ScanBy | string;
}
export declare namespace DescribeAlarmHistoryInput {
    
    const filterSensitiveLog: (obj: DescribeAlarmHistoryInput) => any;
}
export interface DescribeAlarmHistoryOutput {
    
    AlarmHistoryItems?: AlarmHistoryItem[];
    
    NextToken?: string;
}
export declare namespace DescribeAlarmHistoryOutput {
    
    const filterSensitiveLog: (obj: DescribeAlarmHistoryOutput) => any;
}

export declare class InvalidNextToken extends __BaseException {
    readonly name: "InvalidNextToken";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidNextToken, __BaseException>);
}
export interface DescribeAlarmsInput {
    
    AlarmNames?: string[];
    
    AlarmNamePrefix?: string;
    
    AlarmTypes?: (AlarmType | string)[];
    
    ChildrenOfAlarmName?: string;
    
    ParentsOfAlarmName?: string;
    
    StateValue?: StateValue | string;
    
    ActionPrefix?: string;
    
    MaxRecords?: number;
    
    NextToken?: string;
}
export declare namespace DescribeAlarmsInput {
    
    const filterSensitiveLog: (obj: DescribeAlarmsInput) => any;
}
export declare type Statistic = "Average" | "Maximum" | "Minimum" | "SampleCount" | "Sum";

export interface MetricAlarm {
    
    AlarmName?: string;
    
    AlarmArn?: string;
    
    AlarmDescription?: string;
    
    AlarmConfigurationUpdatedTimestamp?: Date;
    
    ActionsEnabled?: boolean;
    
    OKActions?: string[];
    
    AlarmActions?: string[];
    
    InsufficientDataActions?: string[];
    
    StateValue?: StateValue | string;
    
    StateReason?: string;
    
    StateReasonData?: string;
    
    StateUpdatedTimestamp?: Date;
    
    MetricName?: string;
    
    Namespace?: string;
    
    Statistic?: Statistic | string;
    
    ExtendedStatistic?: string;
    
    Dimensions?: Dimension[];
    
    Period?: number;
    
    Unit?: StandardUnit | string;
    
    EvaluationPeriods?: number;
    
    DatapointsToAlarm?: number;
    
    Threshold?: number;
    
    ComparisonOperator?: ComparisonOperator | string;
    
    TreatMissingData?: string;
    
    EvaluateLowSampleCountPercentile?: string;
    
    Metrics?: MetricDataQuery[];
    
    ThresholdMetricId?: string;
}
export declare namespace MetricAlarm {
    
    const filterSensitiveLog: (obj: MetricAlarm) => any;
}
export interface DescribeAlarmsOutput {
    
    CompositeAlarms?: CompositeAlarm[];
    
    MetricAlarms?: MetricAlarm[];
    
    NextToken?: string;
}
export declare namespace DescribeAlarmsOutput {
    
    const filterSensitiveLog: (obj: DescribeAlarmsOutput) => any;
}
export interface DescribeAlarmsForMetricInput {
    
    MetricName: string | undefined;
    
    Namespace: string | undefined;
    
    Statistic?: Statistic | string;
    
    ExtendedStatistic?: string;
    
    Dimensions?: Dimension[];
    
    Period?: number;
    
    Unit?: StandardUnit | string;
}
export declare namespace DescribeAlarmsForMetricInput {
    
    const filterSensitiveLog: (obj: DescribeAlarmsForMetricInput) => any;
}
export interface DescribeAlarmsForMetricOutput {
    
    MetricAlarms?: MetricAlarm[];
}
export declare namespace DescribeAlarmsForMetricOutput {
    
    const filterSensitiveLog: (obj: DescribeAlarmsForMetricOutput) => any;
}
export interface DescribeAnomalyDetectorsInput {
    
    NextToken?: string;
    
    MaxResults?: number;
    
    Namespace?: string;
    
    MetricName?: string;
    
    Dimensions?: Dimension[];
    
    AnomalyDetectorTypes?: (AnomalyDetectorType | string)[];
}
export declare namespace DescribeAnomalyDetectorsInput {
    
    const filterSensitiveLog: (obj: DescribeAnomalyDetectorsInput) => any;
}
export interface DescribeAnomalyDetectorsOutput {
    
    AnomalyDetectors?: AnomalyDetector[];
    
    NextToken?: string;
}
export declare namespace DescribeAnomalyDetectorsOutput {
    
    const filterSensitiveLog: (obj: DescribeAnomalyDetectorsOutput) => any;
}
export interface DescribeInsightRulesInput {
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace DescribeInsightRulesInput {
    
    const filterSensitiveLog: (obj: DescribeInsightRulesInput) => any;
}

export interface InsightRule {
    
    Name: string | undefined;
    
    State: string | undefined;
    
    Schema: string | undefined;
    
    Definition: string | undefined;
}
export declare namespace InsightRule {
    
    const filterSensitiveLog: (obj: InsightRule) => any;
}
export interface DescribeInsightRulesOutput {
    
    NextToken?: string;
    
    InsightRules?: InsightRule[];
}
export declare namespace DescribeInsightRulesOutput {
    
    const filterSensitiveLog: (obj: DescribeInsightRulesOutput) => any;
}

export interface DimensionFilter {
    
    Name: string | undefined;
    
    Value?: string;
}
export declare namespace DimensionFilter {
    
    const filterSensitiveLog: (obj: DimensionFilter) => any;
}
export interface DisableAlarmActionsInput {
    
    AlarmNames: string[] | undefined;
}
export declare namespace DisableAlarmActionsInput {
    
    const filterSensitiveLog: (obj: DisableAlarmActionsInput) => any;
}
export interface DisableInsightRulesInput {
    
    RuleNames: string[] | undefined;
}
export declare namespace DisableInsightRulesInput {
    
    const filterSensitiveLog: (obj: DisableInsightRulesInput) => any;
}
export interface DisableInsightRulesOutput {
    
    Failures?: PartialFailure[];
}
export declare namespace DisableInsightRulesOutput {
    
    const filterSensitiveLog: (obj: DisableInsightRulesOutput) => any;
}
export interface EnableAlarmActionsInput {
    
    AlarmNames: string[] | undefined;
}
export declare namespace EnableAlarmActionsInput {
    
    const filterSensitiveLog: (obj: EnableAlarmActionsInput) => any;
}
export interface EnableInsightRulesInput {
    
    RuleNames: string[] | undefined;
}
export declare namespace EnableInsightRulesInput {
    
    const filterSensitiveLog: (obj: EnableInsightRulesInput) => any;
}
export interface EnableInsightRulesOutput {
    
    Failures?: PartialFailure[];
}
export declare namespace EnableInsightRulesOutput {
    
    const filterSensitiveLog: (obj: EnableInsightRulesOutput) => any;
}

export declare class LimitExceededException extends __BaseException {
    readonly name: "LimitExceededException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
}
export interface GetDashboardInput {
    
    DashboardName: string | undefined;
}
export declare namespace GetDashboardInput {
    
    const filterSensitiveLog: (obj: GetDashboardInput) => any;
}
export interface GetDashboardOutput {
    
    DashboardArn?: string;
    
    DashboardBody?: string;
    
    DashboardName?: string;
}
export declare namespace GetDashboardOutput {
    
    const filterSensitiveLog: (obj: GetDashboardOutput) => any;
}
export interface GetInsightRuleReportInput {
    
    RuleName: string | undefined;
    
    StartTime: Date | undefined;
    
    EndTime: Date | undefined;
    
    Period: number | undefined;
    
    MaxContributorCount?: number;
    
    Metrics?: string[];
    
    OrderBy?: string;
}
export declare namespace GetInsightRuleReportInput {
    
    const filterSensitiveLog: (obj: GetInsightRuleReportInput) => any;
}

export interface InsightRuleContributorDatapoint {
    
    Timestamp: Date | undefined;
    
    ApproximateValue: number | undefined;
}
export declare namespace InsightRuleContributorDatapoint {
    
    const filterSensitiveLog: (obj: InsightRuleContributorDatapoint) => any;
}

export interface InsightRuleContributor {
    
    Keys: string[] | undefined;
    
    ApproximateAggregateValue: number | undefined;
    
    Datapoints: InsightRuleContributorDatapoint[] | undefined;
}
export declare namespace InsightRuleContributor {
    
    const filterSensitiveLog: (obj: InsightRuleContributor) => any;
}

export interface InsightRuleMetricDatapoint {
    
    Timestamp: Date | undefined;
    
    UniqueContributors?: number;
    
    MaxContributorValue?: number;
    
    SampleCount?: number;
    
    Average?: number;
    
    Sum?: number;
    
    Minimum?: number;
    
    Maximum?: number;
}
export declare namespace InsightRuleMetricDatapoint {
    
    const filterSensitiveLog: (obj: InsightRuleMetricDatapoint) => any;
}
export interface GetInsightRuleReportOutput {
    
    KeyLabels?: string[];
    
    AggregationStatistic?: string;
    
    AggregateValue?: number;
    
    ApproximateUniqueCount?: number;
    
    Contributors?: InsightRuleContributor[];
    
    MetricDatapoints?: InsightRuleMetricDatapoint[];
}
export declare namespace GetInsightRuleReportOutput {
    
    const filterSensitiveLog: (obj: GetInsightRuleReportOutput) => any;
}

export interface LabelOptions {
    
    Timezone?: string;
}
export declare namespace LabelOptions {
    
    const filterSensitiveLog: (obj: LabelOptions) => any;
}
export interface GetMetricDataInput {
    
    MetricDataQueries: MetricDataQuery[] | undefined;
    
    StartTime: Date | undefined;
    
    EndTime: Date | undefined;
    
    NextToken?: string;
    
    ScanBy?: ScanBy | string;
    
    MaxDatapoints?: number;
    
    LabelOptions?: LabelOptions;
}
export declare namespace GetMetricDataInput {
    
    const filterSensitiveLog: (obj: GetMetricDataInput) => any;
}

export interface MessageData {
    
    Code?: string;
    
    Value?: string;
}
export declare namespace MessageData {
    
    const filterSensitiveLog: (obj: MessageData) => any;
}
export declare enum StatusCode {
    COMPLETE = "Complete",
    INTERNAL_ERROR = "InternalError",
    PARTIAL_DATA = "PartialData"
}

export interface MetricDataResult {
    
    Id?: string;
    
    Label?: string;
    
    Timestamps?: Date[];
    
    Values?: number[];
    
    StatusCode?: StatusCode | string;
    
    Messages?: MessageData[];
}
export declare namespace MetricDataResult {
    
    const filterSensitiveLog: (obj: MetricDataResult) => any;
}
export interface GetMetricDataOutput {
    
    MetricDataResults?: MetricDataResult[];
    
    NextToken?: string;
    
    Messages?: MessageData[];
}
export declare namespace GetMetricDataOutput {
    
    const filterSensitiveLog: (obj: GetMetricDataOutput) => any;
}
export interface GetMetricStatisticsInput {
    
    Namespace: string | undefined;
    
    MetricName: string | undefined;
    
    Dimensions?: Dimension[];
    
    StartTime: Date | undefined;
    
    EndTime: Date | undefined;
    
    Period: number | undefined;
    
    Statistics?: (Statistic | string)[];
    
    ExtendedStatistics?: string[];
    
    Unit?: StandardUnit | string;
}
export declare namespace GetMetricStatisticsInput {
    
    const filterSensitiveLog: (obj: GetMetricStatisticsInput) => any;
}
export interface GetMetricStatisticsOutput {
    
    Label?: string;
    
    Datapoints?: Datapoint[];
}
export declare namespace GetMetricStatisticsOutput {
    
    const filterSensitiveLog: (obj: GetMetricStatisticsOutput) => any;
}
export interface GetMetricStreamInput {
    
    Name: string | undefined;
}
export declare namespace GetMetricStreamInput {
    
    const filterSensitiveLog: (obj: GetMetricStreamInput) => any;
}

export interface MetricStreamFilter {
    
    Namespace?: string;
}
export declare namespace MetricStreamFilter {
    
    const filterSensitiveLog: (obj: MetricStreamFilter) => any;
}
export declare enum MetricStreamOutputFormat {
    JSON = "json",
    OPEN_TELEMETRY_0_7 = "opentelemetry0.7"
}
export interface GetMetricStreamOutput {
    
    Arn?: string;
    
    Name?: string;
    
    IncludeFilters?: MetricStreamFilter[];
    
    ExcludeFilters?: MetricStreamFilter[];
    
    FirehoseArn?: string;
    
    RoleArn?: string;
    
    State?: string;
    
    CreationDate?: Date;
    
    LastUpdateDate?: Date;
    
    OutputFormat?: MetricStreamOutputFormat | string;
}
export declare namespace GetMetricStreamOutput {
    
    const filterSensitiveLog: (obj: GetMetricStreamOutput) => any;
}
export interface GetMetricWidgetImageInput {
    
    MetricWidget: string | undefined;
    
    OutputFormat?: string;
}
export declare namespace GetMetricWidgetImageInput {
    
    const filterSensitiveLog: (obj: GetMetricWidgetImageInput) => any;
}
export interface GetMetricWidgetImageOutput {
    
    MetricWidgetImage?: Uint8Array;
}
export declare namespace GetMetricWidgetImageOutput {
    
    const filterSensitiveLog: (obj: GetMetricWidgetImageOutput) => any;
}
export interface ListDashboardsInput {
    
    DashboardNamePrefix?: string;
    
    NextToken?: string;
}
export declare namespace ListDashboardsInput {
    
    const filterSensitiveLog: (obj: ListDashboardsInput) => any;
}
export interface ListDashboardsOutput {
    
    DashboardEntries?: DashboardEntry[];
    
    NextToken?: string;
}
export declare namespace ListDashboardsOutput {
    
    const filterSensitiveLog: (obj: ListDashboardsOutput) => any;
}
export declare enum RecentlyActive {
    PT3H = "PT3H"
}
export interface ListMetricsInput {
    
    Namespace?: string;
    
    MetricName?: string;
    
    Dimensions?: DimensionFilter[];
    
    NextToken?: string;
    
    RecentlyActive?: RecentlyActive | string;
}
export declare namespace ListMetricsInput {
    
    const filterSensitiveLog: (obj: ListMetricsInput) => any;
}
export interface ListMetricsOutput {
    
    Metrics?: Metric[];
    
    NextToken?: string;
}
export declare namespace ListMetricsOutput {
    
    const filterSensitiveLog: (obj: ListMetricsOutput) => any;
}
export interface ListMetricStreamsInput {
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListMetricStreamsInput {
    
    const filterSensitiveLog: (obj: ListMetricStreamsInput) => any;
}

export interface MetricStreamEntry {
    
    Arn?: string;
    
    CreationDate?: Date;
    
    LastUpdateDate?: Date;
    
    Name?: string;
    
    FirehoseArn?: string;
    
    State?: string;
    
    OutputFormat?: MetricStreamOutputFormat | string;
}
export declare namespace MetricStreamEntry {
    
    const filterSensitiveLog: (obj: MetricStreamEntry) => any;
}
export interface ListMetricStreamsOutput {
    
    NextToken?: string;
    
    Entries?: MetricStreamEntry[];
}
export declare namespace ListMetricStreamsOutput {
    
    const filterSensitiveLog: (obj: ListMetricStreamsOutput) => any;
}
export interface ListTagsForResourceInput {
    
    ResourceARN: string | undefined;
}
export declare namespace ListTagsForResourceInput {
    
    const filterSensitiveLog: (obj: ListTagsForResourceInput) => any;
}

export interface Tag {
    
    Key: string | undefined;
    
    Value: string | undefined;
}
export declare namespace Tag {
    
    const filterSensitiveLog: (obj: Tag) => any;
}
export interface ListTagsForResourceOutput {
    
    Tags?: Tag[];
}
export declare namespace ListTagsForResourceOutput {
    
    const filterSensitiveLog: (obj: ListTagsForResourceOutput) => any;
}
export interface PutAnomalyDetectorInput {
    
    Namespace?: string;
    
    MetricName?: string;
    
    Dimensions?: Dimension[];
    
    Stat?: string;
    
    Configuration?: AnomalyDetectorConfiguration;
    
    SingleMetricAnomalyDetector?: SingleMetricAnomalyDetector;
    
    MetricMathAnomalyDetector?: MetricMathAnomalyDetector;
}
export declare namespace PutAnomalyDetectorInput {
    
    const filterSensitiveLog: (obj: PutAnomalyDetectorInput) => any;
}
export interface PutAnomalyDetectorOutput {
}
export declare namespace PutAnomalyDetectorOutput {
    
    const filterSensitiveLog: (obj: PutAnomalyDetectorOutput) => any;
}

export declare class LimitExceededFault extends __BaseException {
    readonly name: "LimitExceededFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LimitExceededFault, __BaseException>);
}
export interface PutCompositeAlarmInput {
    
    ActionsEnabled?: boolean;
    
    AlarmActions?: string[];
    
    AlarmDescription?: string;
    
    AlarmName: string | undefined;
    
    AlarmRule: string | undefined;
    
    InsufficientDataActions?: string[];
    
    OKActions?: string[];
    
    Tags?: Tag[];
}
export declare namespace PutCompositeAlarmInput {
    
    const filterSensitiveLog: (obj: PutCompositeAlarmInput) => any;
}
export interface PutDashboardInput {
    
    DashboardName: string | undefined;
    
    DashboardBody: string | undefined;
}
export declare namespace PutDashboardInput {
    
    const filterSensitiveLog: (obj: PutDashboardInput) => any;
}
export interface PutDashboardOutput {
    
    DashboardValidationMessages?: DashboardValidationMessage[];
}
export declare namespace PutDashboardOutput {
    
    const filterSensitiveLog: (obj: PutDashboardOutput) => any;
}
export interface PutInsightRuleInput {
    
    RuleName: string | undefined;
    
    RuleState?: string;
    
    RuleDefinition: string | undefined;
    
    Tags?: Tag[];
}
export declare namespace PutInsightRuleInput {
    
    const filterSensitiveLog: (obj: PutInsightRuleInput) => any;
}
export interface PutInsightRuleOutput {
}
export declare namespace PutInsightRuleOutput {
    
    const filterSensitiveLog: (obj: PutInsightRuleOutput) => any;
}
export interface PutMetricAlarmInput {
    
    AlarmName: string | undefined;
    
    AlarmDescription?: string;
    
    ActionsEnabled?: boolean;
    
    OKActions?: string[];
    
    AlarmActions?: string[];
    
    InsufficientDataActions?: string[];
    
    MetricName?: string;
    
    Namespace?: string;
    
    Statistic?: Statistic | string;
    
    ExtendedStatistic?: string;
    
    Dimensions?: Dimension[];
    
    Period?: number;
    
    Unit?: StandardUnit | string;
    
    EvaluationPeriods: number | undefined;
    
    DatapointsToAlarm?: number;
    
    Threshold?: number;
    
    ComparisonOperator: ComparisonOperator | string | undefined;
    
    TreatMissingData?: string;
    
    EvaluateLowSampleCountPercentile?: string;
    
    Metrics?: MetricDataQuery[];
    
    Tags?: Tag[];
    
    ThresholdMetricId?: string;
}
export declare namespace PutMetricAlarmInput {
    
    const filterSensitiveLog: (obj: PutMetricAlarmInput) => any;
}

export interface StatisticSet {
    
    SampleCount: number | undefined;
    
    Sum: number | undefined;
    
    Minimum: number | undefined;
    
    Maximum: number | undefined;
}
export declare namespace StatisticSet {
    
    const filterSensitiveLog: (obj: StatisticSet) => any;
}

export interface MetricDatum {
    
    MetricName: string | undefined;
    
    Dimensions?: Dimension[];
    
    Timestamp?: Date;
    
    Value?: number;
    
    StatisticValues?: StatisticSet;
    
    Values?: number[];
    
    Counts?: number[];
    
    Unit?: StandardUnit | string;
    
    StorageResolution?: number;
}
export declare namespace MetricDatum {
    
    const filterSensitiveLog: (obj: MetricDatum) => any;
}
export interface PutMetricDataInput {
    
    Namespace: string | undefined;
    
    MetricData: MetricDatum[] | undefined;
}
export declare namespace PutMetricDataInput {
    
    const filterSensitiveLog: (obj: PutMetricDataInput) => any;
}
export interface PutMetricStreamInput {
    
    Name: string | undefined;
    
    IncludeFilters?: MetricStreamFilter[];
    
    ExcludeFilters?: MetricStreamFilter[];
    
    FirehoseArn: string | undefined;
    
    RoleArn: string | undefined;
    
    OutputFormat: MetricStreamOutputFormat | string | undefined;
    
    Tags?: Tag[];
}
export declare namespace PutMetricStreamInput {
    
    const filterSensitiveLog: (obj: PutMetricStreamInput) => any;
}
export interface PutMetricStreamOutput {
    
    Arn?: string;
}
export declare namespace PutMetricStreamOutput {
    
    const filterSensitiveLog: (obj: PutMetricStreamOutput) => any;
}

export declare class InvalidFormatFault extends __BaseException {
    readonly name: "InvalidFormatFault";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidFormatFault, __BaseException>);
}
export interface SetAlarmStateInput {
    
    AlarmName: string | undefined;
    
    StateValue: StateValue | string | undefined;
    
    StateReason: string | undefined;
    
    StateReasonData?: string;
}
export declare namespace SetAlarmStateInput {
    
    const filterSensitiveLog: (obj: SetAlarmStateInput) => any;
}
export interface StartMetricStreamsInput {
    
    Names: string[] | undefined;
}
export declare namespace StartMetricStreamsInput {
    
    const filterSensitiveLog: (obj: StartMetricStreamsInput) => any;
}
export interface StartMetricStreamsOutput {
}
export declare namespace StartMetricStreamsOutput {
    
    const filterSensitiveLog: (obj: StartMetricStreamsOutput) => any;
}
export interface StopMetricStreamsInput {
    
    Names: string[] | undefined;
}
export declare namespace StopMetricStreamsInput {
    
    const filterSensitiveLog: (obj: StopMetricStreamsInput) => any;
}
export interface StopMetricStreamsOutput {
}
export declare namespace StopMetricStreamsOutput {
    
    const filterSensitiveLog: (obj: StopMetricStreamsOutput) => any;
}
export interface TagResourceInput {
    
    ResourceARN: string | undefined;
    
    Tags: Tag[] | undefined;
}
export declare namespace TagResourceInput {
    
    const filterSensitiveLog: (obj: TagResourceInput) => any;
}
export interface TagResourceOutput {
}
export declare namespace TagResourceOutput {
    
    const filterSensitiveLog: (obj: TagResourceOutput) => any;
}
export interface UntagResourceInput {
    
    ResourceARN: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace UntagResourceInput {
    
    const filterSensitiveLog: (obj: UntagResourceInput) => any;
}
export interface UntagResourceOutput {
}
export declare namespace UntagResourceOutput {
    
    const filterSensitiveLog: (obj: UntagResourceOutput) => any;
}
